generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["summons", "general"]
}

model Auth {
  auth_id String @id @default(uuid())
  user_id String
  email String
  password String?
  access_token String?
  status AuthStatus @default(DEFAULT)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [user_id])

  @@schema("general")
}

enum AuthStatus {
  GOOGLE
  DEFAULT

  @@schema("general")
}

enum UserType {
  DEFAULT
  DEFAULT_ADMIN
  ADMIN
  @@schema("general")
}

model User {
  user_id String @id @default(uuid())
  name String  @db.VarChar(100)
  nick_name String @db.VarChar(100)
  status Status @default(ACTIVE)
  type UserType @default(DEFAULT)
  birth_date DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user_x_departament User_X_Departament[]
  user_x_summons User_X_Summons[]
  auth Auth[]
  summons_status Summons_Status[]
  user_x_company User_X_Company[]

  @@schema("general")
}

model User_X_Departament {
  departament_id String
  user_id String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [user_id])
  departament Departament @relation(fields: [departament_id], references: [departament_id])

  @@id([user_id, departament_id])
  @@schema("general")
}

model Departament {
  departament_id String @id @default(uuid())
  name String @db.VarChar(100)
  description String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user_x_departament User_X_Departament[]
  departament_x_company Departament_X_Company[]

  @@schema("general")
}

model Departament_X_Company {
  departament_id String
  company_id String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  departament Departament @relation(fields: [departament_id], references: [departament_id])
  company Company @relation(fields: [company_id], references: [company_id])

  @@id([departament_id, company_id])
  @@schema("general")
}

model Company {
  company_id String @id @default(uuid())
  fantasy_name String @db.VarChar(200)
  social_reason String  @db.VarChar(200)
  cnpj String @db.VarChar(14)
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  company_x_address Company_X_Address[]
  departament_x_company Departament_X_Company[]
  user_x_company User_X_Company[]
  company_data Company_Data[]
  company_responsible Company_Responsible[]

  @@schema("general")
}

model Company_Data {
  company_data_id String @id @default(uuid())
  responsible_email String
  company_id String
  phone String
  opening String
  port String
  situation String
  legal_natural  String

  company Company @relation(fields: [company_id], references: [company_id])

  @@schema("general")
}

model Company_Responsible {
  company_responsible_id String @id @default(uuid())
  name String
  company_id String
  cpf String @db.VarChar(11)
  birth_date DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  company Company @relation(fields: [company_id], references: [company_id])

  @@schema("general")
}

model User_X_Company {
  user_id String
  company_id String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [user_id])
  company Company @relation(fields: [company_id], references: [company_id])

  @@id([user_id, company_id])
  @@schema("general")
}

model User_X_Summons {
  user_id String
  summons_id String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [user_id])
  summons Summons @relation(fields: [summons_id], references: [summons_id])

  @@id([user_id, summons_id])
  @@schema("general")
}

model Company_X_Address {
  company_id String
  address_id String
  status Status @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  address Address @relation(fields: [address_id], references: [address_id])
  company Company @relation(fields: [company_id], references: [company_id])

  @@id([address_id, company_id])
  @@schema("general")
}

model Address {
  address_id String @id @default(uuid())
  district String
  street String
  number String
  complement String
  zipcode String
  city_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  company_address Company_X_Address[]
  city City @relation(fields: [city_id],  references: [city_id])

  @@schema("general")
}

model City {
  city_id String @id @default(uuid())
  name String
  state_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  address Address[]
  state State @relation(fields: [state_id],  references: [state_id])

  @@schema("general")
}

model State {
  state_id String @id @default(uuid())
  name String
  coutry_id String
  ur String @db.VarChar(2)

  country Country @relation(fields: [coutry_id], references: [country_id])

  city City[]
  @@schema("general")
}

model Country {
  country_id String @id @default(uuid())
  name String
  ur String @db.VarChar(2)

  state State[]

  @@schema("general")
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED

  @@schema("general")
}

model Summons {
  summons_id String @id @default(uuid())
  title String
  description String
  status_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user_x_summons User_X_Summons[]
  summons_status Summons_Status @relation(fields: [status_id], references: [summons_status_id])

  @@schema("summons")
}

model Summons_Status {
  summons_status_id String @id @default(uuid())
  status SummonsStatus @default(PENDING)
  update_user_id String

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  summons Summons[]
  summons_status User @relation(fields: [update_user_id], references: [user_id])

  @@schema("summons")
}

enum SummonsStatus {
  STARTED
  PENDING
  PAUSED
  FINISHED

  @@schema("summons")
}
